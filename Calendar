# Author: Mengting Bao (mtbao@bu.edu),06/15/2022
# A class to represent calendar dates
#

class Date:
    """ A class that stores and manipulates dates,
        represented by a day, month, and year.
    """

    # The constructor for the Date class.
    def __init__(self, init_month, init_day, init_year):
        """ The constructor for objects of type Date. """
        self.month = init_month
        self.day = init_day
        self.year = init_year
        

    # The function for the Date class that returns a Date
    # object in a string representation.
    def __repr__(self):
        """ This method returns a string representation for the
            object of type Date that it is called on (named self).

            ** Note that this _can_ be called explicitly, but
              it more often is used implicitly via printing or evaluating.
        """
        s = '%02d/%02d/%04d' % (self.month, self.day, self.year)
        return s

    def is_leap_year(self):
        """ Returns True if the called object is
            in a leap year. Otherwise, returns False.
        """
        if self.year % 400 == 0:
            return True
        elif self.year % 100 == 0:
            return False
        elif self.year % 4 == 0:
            return True
        return False

    def copy(self):
        """ Returns a new object with the same month, day, year
            as the called object (self).
        """
        new_date = Date(self.month, self.day, self.year)
        return new_date

#### Put your code below. ####

    def advance_one(self):
        """ Changes the called object so that it represents one calendar day after the date that it originally represented.
        """
        days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        if self.is_leap_year() == True and self.month == 2 and self.day == 28:
            self.day += 1
        elif self.is_leap_year() == True and self.month == 2 and self.day == 29:
            self.day = 1
            self.month += 1
        elif self.day == days_in_month[self.month]:
            if self.month == 12:
                self.month = 1
                self.day = 1
                self.year += 1
            else:
                self.month += 1
                self.day = 1
        else:
            self.day += 1
            
    
    
    def advance_n(self, n):
        """ Changes the calling object so that it represents n calendar days after the date it originally represented
        """
        print(self)
        if n == 0:
            print(self)
        else:
            for i in range(n):
                self.advance_one()
                print(self)
                
                
    def __eq__(self, other):
        """ Returns True if the called object (self) and the argument (other) represent the same calendar date.
            Otherwise, this method should return False.
        """
        if self.month == other.month and self.day == other.day and self.year == other.year:
            return True
        else:
            return False
        
    
    
    def is_before(self, other):
        """ Returns True if the called object represents a calendar date that occurs before the calendar date that is represented by other.
            Otherwise, this method should return False.
        """
        if other.year > self.year:
            return True
        elif other.year == self.year:
            if other.month == self.month:
                if other.day > self.day:
                    return True
                else:
                    return False
            elif other.month > self.month:
                return True
            else:
                return False
        else:
            return False
    
    
    
    def is_after(self, other):
        """ Returns True if the calling object represents a calendar date that occurs after the calendar date that is represented by other
            Otherwise, this method should return False.
        """
        if self.is_before(other):
            return False
        if self.__eq__(other):
            return False
        else:
            return True
        
    
    
    def days_between(self, other):
        """ Returns an integer that represents the number of days between self and other.
        """
        result = 0
        copy_self = self.copy()
        copy_other = other.copy()
        
        if copy_self == copy_other:
            result = 0
            return result
        elif copy_self.is_before(copy_other):
            while copy_self.is_before(copy_other):
                copy_self.advance_one()
                result -= 1
            return result
        elif copy_self.is_after(copy_other):
            while copy_self.is_after(copy_other):
                copy_other.advance_one()
                result += 1
            return result
            

    
    def day_name(self):
        """ Returns a string that indicates the name of the day of the week of the Date object that calls it
        """
        day_names = ['Monday', 'Tuesday', 'Wednesday', 
             'Thursday', 'Friday', 'Saturday', 'Sunday']
        day_refer = Date(6, 14, 2021)
        interval = self.days_between(day_refer)
        
        if interval % 7 == 0:
            return day_names[0]
        if interval % 7 == 1:
            return day_names[1]
        if interval % 7 == 2:
            return day_names[2]
        if interval % 7 == 3:
            return day_names[3]
        if interval % 7 == 4:
            return day_names[4]
        if interval % 7 == 5:
            return day_names[5]
        if interval % 7 == 6:
            return day_names[6]
 
        
        
    
